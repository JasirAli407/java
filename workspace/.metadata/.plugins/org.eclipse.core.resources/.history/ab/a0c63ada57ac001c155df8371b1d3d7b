package binarytrees_1;

import java.util.Scanner;

public class BinaryTreeUse {

	public static void printTreeDetailed(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}

		System.out.print(root.data + ":");
		if (root.left != null) {
			System.out.print("L" + root.left.data);
		}
		if (root.right != null) {
			System.out.print(", R" + root.right.data);
		}
		System.out.println();

		printTreeDetailed(root.left);
		printTreeDetailed(root.right);
	}
	
	public static BinaryTreeNode<Integer> takeTreeInput() {
		Scanner s = new Scanner(System.in);
		System.out.println("enter root data");

		int rootData = s.nextInt();

		if (rootData == -1) {
			return null;
		}

		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		BinaryTreeNode<Integer> leftChild = takeTreeInput();
		BinaryTreeNode<Integer> rightChild = takeTreeInput();

		root.left = leftChild;
		root.right = rightChild;

		return root;

	}
	
	public static BinaryTreeNode<Integer> takeTreeInputBetter(boolean isRoot,int parentData,  boolean isLeft) {
		Scanner s = new Scanner(System.in);
		if(isRoot) {
		System.out.println("enter root data");
		}
		else {
			if(isLeft) {
				System.out.println("enter left child of " + parentData+":");
			}
			else {
				System.out.println("enter right child of " + parentData +":");
			}
			
		}
		int rootData = s.nextInt();

		if (rootData == -1) {
			return null;
		}

		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		
		BinaryTreeNode<Integer> leftChild = takeTreeInputBetter(false, rootData, true);
		BinaryTreeNode<Integer> rightChild = takeTreeInputBetter(false, rootData, false);

		root.left = leftChild;
		root.right = rightChild;

		return root;

	}

	public static void main(String[] args) {

		//		                                                   1
		//		                                                  / \
		//		                                                 2   3
		//		                                                 \   /
		//		                                                  4  5 

		//		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(1);
		//		BinaryTreeNode<Integer> rootLeft = new BinaryTreeNode<Integer>(2);
		//		BinaryTreeNode<Integer> rootRight = new BinaryTreeNode<Integer>(3);
		//		root.left = rootLeft;
		//		root.right = rootRight;
		//
		//		BinaryTreeNode<Integer> twoRight = new BinaryTreeNode<Integer>(4);
		//		rootLeft.right = twoRight;
		//		BinaryTreeNode<Integer> threeLeft = new BinaryTreeNode<Integer>(5);
		//		rootRight.left = threeLeft;

//		BinaryTreeNode<Integer> root = takeTreeInput();
		BinaryTreeNode<Integer> root = takeTreeInputBetter(true, 0, false);
		printTreeDetailed(root);
	}

	

}
